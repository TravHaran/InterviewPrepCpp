Vector: Max Sub Array ( ** Interview Question)
Title: Maximum Subarray Sum

Introduction: In computer science, one of the frequently encountered problems is determining the subarray (a contiguous portion of an array) that has the largest sum. This problem can be found in various applications, from image processing to financial analysis.

Objective: Given a list of integers, nums, find the contiguous subarray (which could contain at least one number) which has the largest sum, and return that sum.

Detailed Requirements:

Input:

A list of integers, nums, representing the array. The list can be of any length, including being empty.

Output:

An integer value representing the sum of the contiguous subarray with the largest sum.

Examples:

Example 1:

Input:

nums: [-2,1,-3,4,-1,2,1,-5,4]

Output:

6

Explanation:

The contiguous subarray [4,-1,2,1] has the largest sum, which is 6.

Example 2:

Input:

nums: [1]

Output:

1

Explanation:

The single integer in the array is both the maximum sum and the only subarray.

Example 3:

Input:

nums: [5,4,-1,7,8]

Output:

23

Explanation:

The entire array forms the subarray with the maximum sum.



Tips:

An empty list should return a sum of 0.

Utilizing the Kadaneâ€™s Algorithm, you can find the maximum subarray sum efficiently. The essence of this algorithm is to look for all positive contiguous segments of the array and to maintain a maximum sum contiguous segment among all positive segments.

At each step, decide whether to extend the current subarray or start a new one fresh from the current element. This decision is made based on which option gives the higher sum.



This problem tests a student's ability to think about optimization, as the naive approach of checking all subarrays would be highly inefficient for larger arrays.